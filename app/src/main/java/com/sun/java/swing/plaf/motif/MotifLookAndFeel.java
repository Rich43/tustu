package com.sun.java.swing.plaf.motif;

import com.sun.java.swing.plaf.motif.MotifBorders;
import com.sun.java.swing.plaf.motif.MotifTreeUI;
import com.sun.xml.internal.ws.model.RuntimeModeler;
import java.awt.Color;
import java.awt.Font;
import javax.swing.JSplitPane;
import javax.swing.JTextField;
import javax.swing.UIDefaults;
import javax.swing.plaf.BorderUIResource;
import javax.swing.plaf.ColorUIResource;
import javax.swing.plaf.FontUIResource;
import javax.swing.plaf.InsetsUIResource;
import javax.swing.plaf.basic.BasicBorders;
import javax.swing.plaf.basic.BasicLookAndFeel;
import javax.swing.plaf.basic.BasicRootPaneUI;
import javax.swing.plaf.basic.BasicSliderUI;
import javax.swing.text.DefaultEditorKit;
import sun.awt.OSInfo;
import sun.swing.FilePane;
import sun.swing.SwingUtilities2;

/* loaded from: rt.jar:com/sun/java/swing/plaf/motif/MotifLookAndFeel.class */
public class MotifLookAndFeel extends BasicLookAndFeel {
    @Override // javax.swing.LookAndFeel
    public String getName() {
        return "CDE/Motif";
    }

    @Override // javax.swing.LookAndFeel
    public String getID() {
        return "Motif";
    }

    @Override // javax.swing.LookAndFeel
    public String getDescription() {
        return "The CDE/Motif Look and Feel";
    }

    @Override // javax.swing.LookAndFeel
    public boolean isNativeLookAndFeel() {
        return OSInfo.getOSType() == OSInfo.OSType.SOLARIS;
    }

    @Override // javax.swing.LookAndFeel
    public boolean isSupportedLookAndFeel() {
        return true;
    }

    @Override // javax.swing.plaf.basic.BasicLookAndFeel
    protected void initSystemColorDefaults(UIDefaults uIDefaults) {
        loadSystemColors(uIDefaults, new String[]{"desktop", "#005C5C", "activeCaption", "#000080", "activeCaptionText", "#FFFFFF", "activeCaptionBorder", "#B24D7A", "inactiveCaption", "#AEB2C3", "inactiveCaptionText", "#000000", "inactiveCaptionBorder", "#AEB2C3", "window", "#AEB2C3", "windowBorder", "#AEB2C3", "windowText", "#000000", "menu", "#AEB2C3", "menuText", "#000000", "text", "#FFF7E9", "textText", "#000000", "textHighlight", "#000000", "textHighlightText", "#FFF7E9", "textInactiveText", "#808080", "control", "#AEB2C3", "controlText", "#000000", "controlHighlight", "#DCDEE5", "controlLtHighlight", "#DCDEE5", "controlShadow", "#63656F", "controlLightShadow", "#9397A5", "controlDkShadow", "#000000", "scrollbar", "#AEB2C3", "info", "#FFF7E9", "infoText", "#000000"}, false);
    }

    @Override // javax.swing.plaf.basic.BasicLookAndFeel
    protected void initClassDefaults(UIDefaults uIDefaults) {
        super.initClassDefaults(uIDefaults);
        uIDefaults.putDefaults(new Object[]{"ButtonUI", "com.sun.java.swing.plaf.motif.MotifButtonUI", "CheckBoxUI", "com.sun.java.swing.plaf.motif.MotifCheckBoxUI", "DirectoryPaneUI", "com.sun.java.swing.plaf.motif.MotifDirectoryPaneUI", "FileChooserUI", "com.sun.java.swing.plaf.motif.MotifFileChooserUI", "LabelUI", "com.sun.java.swing.plaf.motif.MotifLabelUI", "MenuBarUI", "com.sun.java.swing.plaf.motif.MotifMenuBarUI", "MenuUI", "com.sun.java.swing.plaf.motif.MotifMenuUI", "MenuItemUI", "com.sun.java.swing.plaf.motif.MotifMenuItemUI", "CheckBoxMenuItemUI", "com.sun.java.swing.plaf.motif.MotifCheckBoxMenuItemUI", "RadioButtonMenuItemUI", "com.sun.java.swing.plaf.motif.MotifRadioButtonMenuItemUI", "RadioButtonUI", "com.sun.java.swing.plaf.motif.MotifRadioButtonUI", "ToggleButtonUI", "com.sun.java.swing.plaf.motif.MotifToggleButtonUI", "PopupMenuUI", "com.sun.java.swing.plaf.motif.MotifPopupMenuUI", "ProgressBarUI", "com.sun.java.swing.plaf.motif.MotifProgressBarUI", "ScrollBarUI", "com.sun.java.swing.plaf.motif.MotifScrollBarUI", "ScrollPaneUI", "com.sun.java.swing.plaf.motif.MotifScrollPaneUI", "SliderUI", "com.sun.java.swing.plaf.motif.MotifSliderUI", "SplitPaneUI", "com.sun.java.swing.plaf.motif.MotifSplitPaneUI", "TabbedPaneUI", "com.sun.java.swing.plaf.motif.MotifTabbedPaneUI", "TextAreaUI", "com.sun.java.swing.plaf.motif.MotifTextAreaUI", "TextFieldUI", "com.sun.java.swing.plaf.motif.MotifTextFieldUI", "PasswordFieldUI", "com.sun.java.swing.plaf.motif.MotifPasswordFieldUI", "TextPaneUI", "com.sun.java.swing.plaf.motif.MotifTextPaneUI", "EditorPaneUI", "com.sun.java.swing.plaf.motif.MotifEditorPaneUI", "TreeUI", "com.sun.java.swing.plaf.motif.MotifTreeUI", "InternalFrameUI", "com.sun.java.swing.plaf.motif.MotifInternalFrameUI", "DesktopPaneUI", "com.sun.java.swing.plaf.motif.MotifDesktopPaneUI", "SeparatorUI", "com.sun.java.swing.plaf.motif.MotifSeparatorUI", "PopupMenuSeparatorUI", "com.sun.java.swing.plaf.motif.MotifPopupMenuSeparatorUI", "OptionPaneUI", "com.sun.java.swing.plaf.motif.MotifOptionPaneUI", "ComboBoxUI", "com.sun.java.swing.plaf.motif.MotifComboBoxUI", "DesktopIconUI", "com.sun.java.swing.plaf.motif.MotifDesktopIconUI"});
    }

    private void initResourceBundle(UIDefaults uIDefaults) {
        uIDefaults.addResourceBundle("com.sun.java.swing.plaf.motif.resources.motif");
    }

    @Override // javax.swing.plaf.basic.BasicLookAndFeel
    protected void initComponentDefaults(UIDefaults uIDefaults) {
        super.initComponentDefaults(uIDefaults);
        initResourceBundle(uIDefaults);
        Object fontUIResource = new FontUIResource(Font.DIALOG, 0, 12);
        Object fontUIResource2 = new FontUIResource("Serif", 0, 12);
        Object fontUIResource3 = new FontUIResource("SansSerif", 0, 12);
        Object fontUIResource4 = new FontUIResource("Monospaced", 0, 12);
        Object colorUIResource = new ColorUIResource(Color.red);
        Object colorUIResource2 = new ColorUIResource(Color.black);
        Object colorUIResource3 = new ColorUIResource(Color.white);
        Object colorUIResource4 = new ColorUIResource(Color.lightGray);
        Object colorUIResource5 = new ColorUIResource(147, 151, 165);
        Object colorUIResource6 = new ColorUIResource(165, 165, 165);
        Object colorUIResource7 = new ColorUIResource(0, 0, 0);
        MotifBorders.BevelBorder bevelBorder = new MotifBorders.BevelBorder(false, uIDefaults.getColor("controlShadow"), uIDefaults.getColor("controlLtHighlight"));
        MotifBorders.BevelBorder bevelBorder2 = new MotifBorders.BevelBorder(true, uIDefaults.getColor("controlShadow"), uIDefaults.getColor("controlLtHighlight"));
        BasicBorders.MarginBorder marginBorder = new BasicBorders.MarginBorder();
        MotifBorders.FocusBorder focusBorder = new MotifBorders.FocusBorder(uIDefaults.getColor("control"), uIDefaults.getColor("activeCaptionBorder"));
        BorderUIResource.CompoundBorderUIResource compoundBorderUIResource = new BorderUIResource.CompoundBorderUIResource(focusBorder, bevelBorder);
        Object compoundBorderUIResource2 = new BorderUIResource.CompoundBorderUIResource(focusBorder, bevelBorder2);
        Object compoundBorderUIResource3 = new BorderUIResource.CompoundBorderUIResource(new MotifBorders.ButtonBorder(uIDefaults.getColor("Button.shadow"), uIDefaults.getColor("Button.highlight"), uIDefaults.getColor("Button.darkShadow"), uIDefaults.getColor("activeCaptionBorder")), marginBorder);
        Object compoundBorderUIResource4 = new BorderUIResource.CompoundBorderUIResource(new MotifBorders.ToggleButtonBorder(uIDefaults.getColor("ToggleButton.shadow"), uIDefaults.getColor("ToggleButton.highlight"), uIDefaults.getColor("ToggleButton.darkShadow"), uIDefaults.getColor("activeCaptionBorder")), marginBorder);
        Object compoundBorderUIResource5 = new BorderUIResource.CompoundBorderUIResource(compoundBorderUIResource, marginBorder);
        Object compoundBorderUIResource6 = new BorderUIResource.CompoundBorderUIResource(bevelBorder2, new MotifBorders.MotifPopupMenuBorder(uIDefaults.getFont("PopupMenu.font"), uIDefaults.getColor("PopupMenu.background"), uIDefaults.getColor("PopupMenu.foreground"), uIDefaults.getColor("controlShadow"), uIDefaults.getColor("controlLtHighlight")));
        Object obj = new UIDefaults.LazyValue() { // from class: com.sun.java.swing.plaf.motif.MotifLookAndFeel.1
            @Override // javax.swing.UIDefaults.LazyValue
            public Object createValue(UIDefaults uIDefaults2) {
                return MotifIconFactory.getMenuItemCheckIcon();
            }
        };
        Object obj2 = new UIDefaults.LazyValue() { // from class: com.sun.java.swing.plaf.motif.MotifLookAndFeel.2
            @Override // javax.swing.UIDefaults.LazyValue
            public Object createValue(UIDefaults uIDefaults2) {
                return MotifIconFactory.getMenuItemArrowIcon();
            }
        };
        Object obj3 = new UIDefaults.LazyValue() { // from class: com.sun.java.swing.plaf.motif.MotifLookAndFeel.3
            @Override // javax.swing.UIDefaults.LazyValue
            public Object createValue(UIDefaults uIDefaults2) {
                return MotifIconFactory.getMenuArrowIcon();
            }
        };
        Object obj4 = new UIDefaults.LazyValue() { // from class: com.sun.java.swing.plaf.motif.MotifLookAndFeel.4
            @Override // javax.swing.UIDefaults.LazyValue
            public Object createValue(UIDefaults uIDefaults2) {
                return MotifIconFactory.getCheckBoxIcon();
            }
        };
        Object obj5 = new UIDefaults.LazyValue() { // from class: com.sun.java.swing.plaf.motif.MotifLookAndFeel.5
            @Override // javax.swing.UIDefaults.LazyValue
            public Object createValue(UIDefaults uIDefaults2) {
                return MotifIconFactory.getRadioButtonIcon();
            }
        };
        Object obj6 = new UIDefaults.LazyValue() { // from class: com.sun.java.swing.plaf.motif.MotifLookAndFeel.6
            @Override // javax.swing.UIDefaults.LazyValue
            public Object createValue(UIDefaults uIDefaults2) {
                Color color = uIDefaults2.getColor("control");
                return new ColorUIResource(Math.max((int) (color.getRed() * 0.85d), 0), Math.max((int) (color.getGreen() * 0.85d), 0), Math.max((int) (color.getBlue() * 0.85d), 0));
            }
        };
        Object obj7 = new UIDefaults.LazyValue() { // from class: com.sun.java.swing.plaf.motif.MotifLookAndFeel.7
            @Override // javax.swing.UIDefaults.LazyValue
            public Object createValue(UIDefaults uIDefaults2) {
                Color color = uIDefaults2.getColor("controlText");
                return new ColorUIResource(Math.max((int) (color.getRed() * 0.85d), 0), Math.max((int) (color.getGreen() * 0.85d), 0), Math.max((int) (color.getBlue() * 0.85d), 0));
            }
        };
        Object obj8 = new UIDefaults.LazyValue() { // from class: com.sun.java.swing.plaf.motif.MotifLookAndFeel.8
            @Override // javax.swing.UIDefaults.LazyValue
            public Object createValue(UIDefaults uIDefaults2) {
                Color color = uIDefaults2.getColor("control");
                return new ColorUIResource(new Color(Math.max((int) (color.getRed() * 0.85d), 0), Math.max((int) (color.getGreen() * 0.85d), 0), Math.max((int) (color.getBlue() * 0.85d), 0)).darker());
            }
        };
        Object obj9 = new UIDefaults.LazyValue() { // from class: com.sun.java.swing.plaf.motif.MotifLookAndFeel.9
            @Override // javax.swing.UIDefaults.LazyValue
            public Object createValue(UIDefaults uIDefaults2) {
                Color color = uIDefaults2.getColor("control");
                return new ColorUIResource(new Color(Math.max((int) (color.getRed() * 0.85d), 0), Math.max((int) (color.getGreen() * 0.85d), 0), Math.max((int) (color.getBlue() * 0.85d), 0)).brighter());
            }
        };
        Object lazyInputMap = new UIDefaults.LazyInputMap(new Object[]{"COPY", DefaultEditorKit.copyAction, "PASTE", DefaultEditorKit.pasteAction, "CUT", DefaultEditorKit.cutAction, "control INSERT", DefaultEditorKit.copyAction, "shift INSERT", DefaultEditorKit.pasteAction, "shift DELETE", DefaultEditorKit.cutAction, "control F", DefaultEditorKit.forwardAction, "control B", DefaultEditorKit.backwardAction, "control D", DefaultEditorKit.deleteNextCharAction, "BACK_SPACE", DefaultEditorKit.deletePrevCharAction, "shift BACK_SPACE", DefaultEditorKit.deletePrevCharAction, "ctrl H", DefaultEditorKit.deletePrevCharAction, "DELETE", DefaultEditorKit.deleteNextCharAction, "ctrl DELETE", DefaultEditorKit.deleteNextWordAction, "ctrl BACK_SPACE", DefaultEditorKit.deletePrevWordAction, "RIGHT", DefaultEditorKit.forwardAction, "LEFT", DefaultEditorKit.backwardAction, "KP_RIGHT", DefaultEditorKit.forwardAction, "KP_LEFT", DefaultEditorKit.backwardAction, "shift LEFT", DefaultEditorKit.selectionBackwardAction, "shift RIGHT", DefaultEditorKit.selectionForwardAction, "control LEFT", DefaultEditorKit.previousWordAction, "control RIGHT", DefaultEditorKit.nextWordAction, "control shift LEFT", DefaultEditorKit.selectionPreviousWordAction, "control shift RIGHT", DefaultEditorKit.selectionNextWordAction, "control SLASH", DefaultEditorKit.selectAllAction, "HOME", DefaultEditorKit.beginLineAction, "END", DefaultEditorKit.endLineAction, "shift HOME", DefaultEditorKit.selectionBeginLineAction, "shift END", DefaultEditorKit.selectionEndLineAction, "control BACK_SLASH", "unselect", "ENTER", JTextField.notifyAction, "control shift O", "toggle-componentOrientation"});
        Object lazyInputMap2 = new UIDefaults.LazyInputMap(new Object[]{"COPY", DefaultEditorKit.copyAction, "PASTE", DefaultEditorKit.pasteAction, "CUT", DefaultEditorKit.cutAction, "control INSERT", DefaultEditorKit.copyAction, "shift INSERT", DefaultEditorKit.pasteAction, "shift DELETE", DefaultEditorKit.cutAction, "control F", DefaultEditorKit.forwardAction, "control B", DefaultEditorKit.backwardAction, "control D", DefaultEditorKit.deleteNextCharAction, "BACK_SPACE", DefaultEditorKit.deletePrevCharAction, "shift BACK_SPACE", DefaultEditorKit.deletePrevCharAction, "ctrl H", DefaultEditorKit.deletePrevCharAction, "DELETE", DefaultEditorKit.deleteNextCharAction, "RIGHT", DefaultEditorKit.forwardAction, "LEFT", DefaultEditorKit.backwardAction, "KP_RIGHT", DefaultEditorKit.forwardAction, "KP_LEFT", DefaultEditorKit.backwardAction, "shift LEFT", DefaultEditorKit.selectionBackwardAction, "shift RIGHT", DefaultEditorKit.selectionForwardAction, "control LEFT", DefaultEditorKit.beginLineAction, "control RIGHT", DefaultEditorKit.endLineAction, "control shift LEFT", DefaultEditorKit.selectionBeginLineAction, "control shift RIGHT", DefaultEditorKit.selectionEndLineAction, "control SLASH", DefaultEditorKit.selectAllAction, "HOME", DefaultEditorKit.beginLineAction, "END", DefaultEditorKit.endLineAction, "shift HOME", DefaultEditorKit.selectionBeginLineAction, "shift END", DefaultEditorKit.selectionEndLineAction, "control BACK_SLASH", "unselect", "ENTER", JTextField.notifyAction, "control shift O", "toggle-componentOrientation"});
        Object lazyInputMap3 = new UIDefaults.LazyInputMap(new Object[]{"COPY", DefaultEditorKit.copyAction, "PASTE", DefaultEditorKit.pasteAction, "CUT", DefaultEditorKit.cutAction, "control INSERT", DefaultEditorKit.copyAction, "shift INSERT", DefaultEditorKit.pasteAction, "shift DELETE", DefaultEditorKit.cutAction, "control F", DefaultEditorKit.forwardAction, "control B", DefaultEditorKit.backwardAction, "control D", DefaultEditorKit.deleteNextCharAction, "BACK_SPACE", DefaultEditorKit.deletePrevCharAction, "shift BACK_SPACE", DefaultEditorKit.deletePrevCharAction, "ctrl H", DefaultEditorKit.deletePrevCharAction, "DELETE", DefaultEditorKit.deleteNextCharAction, "ctrl DELETE", DefaultEditorKit.deleteNextWordAction, "ctrl BACK_SPACE", DefaultEditorKit.deletePrevWordAction, "RIGHT", DefaultEditorKit.forwardAction, "LEFT", DefaultEditorKit.backwardAction, "KP_RIGHT", DefaultEditorKit.forwardAction, "KP_LEFT", DefaultEditorKit.backwardAction, "shift LEFT", DefaultEditorKit.selectionBackwardAction, "shift RIGHT", DefaultEditorKit.selectionForwardAction, "control LEFT", DefaultEditorKit.previousWordAction, "control RIGHT", DefaultEditorKit.nextWordAction, "control shift LEFT", DefaultEditorKit.selectionPreviousWordAction, "control shift RIGHT", DefaultEditorKit.selectionNextWordAction, "control SLASH", DefaultEditorKit.selectAllAction, "HOME", DefaultEditorKit.beginLineAction, "END", DefaultEditorKit.endLineAction, "shift HOME", DefaultEditorKit.selectionBeginLineAction, "shift END", DefaultEditorKit.selectionEndLineAction, "control N", DefaultEditorKit.downAction, "control P", DefaultEditorKit.upAction, "UP", DefaultEditorKit.upAction, "DOWN", DefaultEditorKit.downAction, "PAGE_UP", DefaultEditorKit.pageUpAction, "PAGE_DOWN", DefaultEditorKit.pageDownAction, "shift PAGE_UP", "selection-page-up", "shift PAGE_DOWN", "selection-page-down", "ctrl shift PAGE_UP", "selection-page-left", "ctrl shift PAGE_DOWN", "selection-page-right", "shift UP", DefaultEditorKit.selectionUpAction, "shift DOWN", DefaultEditorKit.selectionDownAction, "ENTER", DefaultEditorKit.insertBreakAction, "TAB", DefaultEditorKit.insertTabAction, "control BACK_SLASH", "unselect", "control HOME", DefaultEditorKit.beginAction, "control END", DefaultEditorKit.endAction, "control shift HOME", DefaultEditorKit.selectionBeginAction, "control shift END", DefaultEditorKit.selectionEndAction, "control T", "next-link-action", "control shift T", "previous-link-action", "control SPACE", "activate-link-action", "control shift O", "toggle-componentOrientation"});
        Object objMakeIcon = SwingUtilities2.makeIcon(getClass(), MotifLookAndFeel.class, "icons/TreeOpen.gif");
        Object objMakeIcon2 = SwingUtilities2.makeIcon(getClass(), MotifLookAndFeel.class, "icons/TreeClosed.gif");
        Object obj10 = new UIDefaults.LazyValue() { // from class: com.sun.java.swing.plaf.motif.MotifLookAndFeel.10
            @Override // javax.swing.UIDefaults.LazyValue
            public Object createValue(UIDefaults uIDefaults2) {
                return MotifTreeCellRenderer.loadLeafIcon();
            }
        };
        Object obj11 = new UIDefaults.LazyValue() { // from class: com.sun.java.swing.plaf.motif.MotifLookAndFeel.11
            @Override // javax.swing.UIDefaults.LazyValue
            public Object createValue(UIDefaults uIDefaults2) {
                return MotifTreeUI.MotifExpandedIcon.createExpandedIcon();
            }
        };
        Object obj12 = new UIDefaults.LazyValue() { // from class: com.sun.java.swing.plaf.motif.MotifLookAndFeel.12
            @Override // javax.swing.UIDefaults.LazyValue
            public Object createValue(UIDefaults uIDefaults2) {
                return MotifTreeUI.MotifCollapsedIcon.createCollapsedIcon();
            }
        };
        Object menuBarBorder = new MotifBorders.MenuBarBorder(uIDefaults.getColor("MenuBar.shadow"), uIDefaults.getColor("MenuBar.highlight"), uIDefaults.getColor("MenuBar.darkShadow"), uIDefaults.getColor("activeCaptionBorder"));
        Object compoundBorderUIResource7 = new BorderUIResource.CompoundBorderUIResource(bevelBorder, marginBorder);
        Object lineBorderUIResource = new BorderUIResource.LineBorderUIResource(uIDefaults.getColor("activeCaptionBorder"));
        uIDefaults.putDefaults(new Object[]{"Desktop.background", uIDefaults.get("desktop"), "Desktop.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[]{"ctrl F5", "restore", "ctrl F4", "close", "ctrl F7", "move", "ctrl F8", "resize", "RIGHT", JSplitPane.RIGHT, "KP_RIGHT", JSplitPane.RIGHT, "shift RIGHT", "shrinkRight", "shift KP_RIGHT", "shrinkRight", "LEFT", JSplitPane.LEFT, "KP_LEFT", JSplitPane.LEFT, "shift LEFT", "shrinkLeft", "shift KP_LEFT", "shrinkLeft", "UP", "up", "KP_UP", "up", "shift UP", "shrinkUp", "shift KP_UP", "shrinkUp", "DOWN", "down", "KP_DOWN", "down", "shift DOWN", "shrinkDown", "shift KP_DOWN", "shrinkDown", "ESCAPE", "escape", "ctrl F9", "minimize", "ctrl F10", "maximize", "ctrl F6", "selectNextFrame", "ctrl TAB", "selectNextFrame", "ctrl alt F6", "selectNextFrame", "shift ctrl alt F6", "selectPreviousFrame", "ctrl F12", "navigateNext", "shift ctrl F12", "navigatePrevious"}), "Panel.background", uIDefaults.get("control"), "Panel.foreground", uIDefaults.get("textText"), "Panel.font", fontUIResource, "ProgressBar.font", fontUIResource, "ProgressBar.foreground", colorUIResource5, "ProgressBar.background", uIDefaults.get("control"), "ProgressBar.selectionForeground", uIDefaults.get("control"), "ProgressBar.selectionBackground", uIDefaults.get("controlText"), "ProgressBar.border", bevelBorder, "ProgressBar.cellLength", new Integer(6), "ProgressBar.cellSpacing", 0, "Button.margin", new InsetsUIResource(2, 4, 2, 4), "Button.border", compoundBorderUIResource3, "Button.background", uIDefaults.get("control"), "Button.foreground", uIDefaults.get("controlText"), "Button.select", uIDefaults.get("controlLightShadow"), "Button.font", fontUIResource, "Button.focusInputMap", new UIDefaults.LazyInputMap(new Object[]{"SPACE", "pressed", "released SPACE", "released"}), "CheckBox.textIconGap", new Integer(8), "CheckBox.margin", new InsetsUIResource(4, 2, 4, 2), "CheckBox.icon", obj4, "CheckBox.focus", uIDefaults.get("activeCaptionBorder"), "CheckBox.focusInputMap", new UIDefaults.LazyInputMap(new Object[]{"SPACE", "pressed", "released SPACE", "released"}), "RadioButton.margin", new InsetsUIResource(4, 2, 4, 2), "RadioButton.textIconGap", new Integer(8), "RadioButton.background", uIDefaults.get("control"), "RadioButton.foreground", uIDefaults.get("controlText"), "RadioButton.icon", obj5, "RadioButton.focus", uIDefaults.get("activeCaptionBorder"), "RadioButton.icon", obj5, "RadioButton.focusInputMap", new UIDefaults.LazyInputMap(new Object[]{"SPACE", "pressed", "released SPACE", "released"}), "ToggleButton.border", compoundBorderUIResource4, "ToggleButton.background", uIDefaults.get("control"), "ToggleButton.foreground", uIDefaults.get("controlText"), "ToggleButton.focus", uIDefaults.get("controlText"), "ToggleButton.select", uIDefaults.get("controlLightShadow"), "ToggleButton.focusInputMap", new UIDefaults.LazyInputMap(new Object[]{"SPACE", "pressed", "released SPACE", "released"}), "Menu.border", compoundBorderUIResource7, "Menu.font", fontUIResource, "Menu.acceleratorFont", fontUIResource, "Menu.acceleratorSelectionForeground", colorUIResource7, "Menu.foreground", uIDefaults.get("menuText"), "Menu.background", uIDefaults.get("menu"), "Menu.selectionForeground", colorUIResource7, "Menu.selectionBackground", colorUIResource6, "Menu.checkIcon", obj, "Menu.arrowIcon", obj3, "Menu.menuPopupOffsetX", new Integer(0), "Menu.menuPopupOffsetY", new Integer(0), "Menu.submenuPopupOffsetX", new Integer(-2), "Menu.submenuPopupOffsetY", new Integer(3), "Menu.shortcutKeys", new int[]{SwingUtilities2.getSystemMnemonicKeyMask(), 4, SwingUtilities2.setAltGraphMask(SwingUtilities2.getSystemMnemonicKeyMask())}, "Menu.cancelMode", "hideMenuTree", "MenuBar.border", menuBarBorder, "MenuBar.background", uIDefaults.get("menu"), "MenuBar.foreground", uIDefaults.get("menuText"), "MenuBar.font", fontUIResource, "MenuBar.windowBindings", new Object[]{"F10", "takeFocus"}, "MenuItem.border", compoundBorderUIResource7, "MenuItem.font", fontUIResource, "MenuItem.acceleratorFont", fontUIResource, "MenuItem.acceleratorSelectionForeground", colorUIResource7, "MenuItem.foreground", uIDefaults.get("menuText"), "MenuItem.background", uIDefaults.get("menu"), "MenuItem.selectionForeground", colorUIResource7, "MenuItem.selectionBackground", colorUIResource6, "MenuItem.checkIcon", obj, "MenuItem.arrowIcon", obj2, "RadioButtonMenuItem.border", compoundBorderUIResource7, "RadioButtonMenuItem.font", fontUIResource, "RadioButtonMenuItem.acceleratorFont", fontUIResource, "RadioButtonMenuItem.acceleratorSelectionForeground", colorUIResource7, "RadioButtonMenuItem.foreground", uIDefaults.get("menuText"), "RadioButtonMenuItem.background", uIDefaults.get("menu"), "RadioButtonMenuItem.selectionForeground", colorUIResource7, "RadioButtonMenuItem.selectionBackground", colorUIResource6, "RadioButtonMenuItem.checkIcon", obj5, "RadioButtonMenuItem.arrowIcon", obj2, "CheckBoxMenuItem.border", compoundBorderUIResource7, "CheckBoxMenuItem.font", fontUIResource, "CheckBoxMenuItem.acceleratorFont", fontUIResource, "CheckBoxMenuItem.acceleratorSelectionForeground", colorUIResource7, "CheckBoxMenuItem.foreground", uIDefaults.get("menuText"), "CheckBoxMenuItem.background", uIDefaults.get("menu"), "CheckBoxMenuItem.selectionForeground", colorUIResource7, "CheckBoxMenuItem.selectionBackground", colorUIResource6, "CheckBoxMenuItem.checkIcon", obj4, "CheckBoxMenuItem.arrowIcon", obj2, "PopupMenu.background", uIDefaults.get("menu"), "PopupMenu.border", compoundBorderUIResource6, "PopupMenu.foreground", uIDefaults.get("menuText"), "PopupMenu.font", fontUIResource, "PopupMenu.consumeEventOnClose", Boolean.TRUE, "Label.font", fontUIResource, "Label.background", uIDefaults.get("control"), "Label.foreground", uIDefaults.get("controlText"), "Separator.shadow", uIDefaults.get("controlShadow"), "Separator.highlight", uIDefaults.get("controlLtHighlight"), "Separator.background", uIDefaults.get("controlLtHighlight"), "Separator.foreground", uIDefaults.get("controlShadow"), "List.focusCellHighlightBorder", lineBorderUIResource, "List.focusInputMap", new UIDefaults.LazyInputMap(new Object[]{"COPY", "copy", "PASTE", "paste", "CUT", "cut", "control INSERT", "copy", "shift INSERT", "paste", "shift DELETE", "cut", "UP", "selectPreviousRow", "KP_UP", "selectPreviousRow", "shift UP", "selectPreviousRowExtendSelection", "shift KP_UP", "selectPreviousRowExtendSelection", "ctrl shift UP", "selectPreviousRowExtendSelection", "ctrl shift KP_UP", "selectPreviousRowExtendSelection", "ctrl UP", "selectPreviousRowChangeLead", "ctrl KP_UP", "selectPreviousRowChangeLead", "DOWN", "selectNextRow", "KP_DOWN", "selectNextRow", "shift DOWN", "selectNextRowExtendSelection", "shift KP_DOWN", "selectNextRowExtendSelection", "ctrl shift DOWN", "selectNextRowExtendSelection", "ctrl shift KP_DOWN", "selectNextRowExtendSelection", "ctrl DOWN", "selectNextRowChangeLead", "ctrl KP_DOWN", "selectNextRowChangeLead", "LEFT", "selectPreviousColumn", "KP_LEFT", "selectPreviousColumn", "shift LEFT", "selectPreviousColumnExtendSelection", "shift KP_LEFT", "selectPreviousColumnExtendSelection", "ctrl shift LEFT", "selectPreviousColumnExtendSelection", "ctrl shift KP_LEFT", "selectPreviousColumnExtendSelection", "ctrl LEFT", "selectPreviousColumnChangeLead", "ctrl KP_LEFT", "selectPreviousColumnChangeLead", "RIGHT", "selectNextColumn", "KP_RIGHT", "selectNextColumn", "shift RIGHT", "selectNextColumnExtendSelection", "shift KP_RIGHT", "selectNextColumnExtendSelection", "ctrl shift RIGHT", "selectNextColumnExtendSelection", "ctrl shift KP_RIGHT", "selectNextColumnExtendSelection", "ctrl RIGHT", "selectNextColumnChangeLead", "ctrl KP_RIGHT", "selectNextColumnChangeLead", "HOME", "selectFirstRow", "shift HOME", "selectFirstRowExtendSelection", "ctrl shift HOME", "selectFirstRowExtendSelection", "ctrl HOME", "selectFirstRowChangeLead", "END", "selectLastRow", "shift END", "selectLastRowExtendSelection", "ctrl shift END", "selectLastRowExtendSelection", "ctrl END", "selectLastRowChangeLead", "PAGE_UP", "scrollUp", "shift PAGE_UP", "scrollUpExtendSelection", "ctrl shift PAGE_UP", "scrollUpExtendSelection", "ctrl PAGE_UP", "scrollUpChangeLead", "PAGE_DOWN", "scrollDown", "shift PAGE_DOWN", "scrollDownExtendSelection", "ctrl shift PAGE_DOWN", "scrollDownExtendSelection", "ctrl PAGE_DOWN", "scrollDownChangeLead", "ctrl A", "selectAll", "ctrl SLASH", "selectAll", "ctrl BACK_SLASH", "clearSelection", "SPACE", "addToSelection", "ctrl SPACE", "toggleAndAnchor", "shift SPACE", "extendTo", "ctrl shift SPACE", "moveSelectionTo"}), "DesktopIcon.icon", SwingUtilities2.makeIcon(getClass(), MotifLookAndFeel.class, "icons/DesktopIcon.gif"), "DesktopIcon.border", null, "DesktopIcon.windowBindings", new Object[]{"ESCAPE", "hideSystemMenu"}, "InternalFrame.activeTitleBackground", uIDefaults.get("activeCaptionBorder"), "InternalFrame.inactiveTitleBackground", uIDefaults.get("inactiveCaptionBorder"), "InternalFrame.windowBindings", new Object[]{"shift ESCAPE", "showSystemMenu", "ctrl SPACE", "showSystemMenu", "ESCAPE", "hideSystemMenu"}, "ScrollBar.background", colorUIResource5, "ScrollBar.foreground", uIDefaults.get("control"), "ScrollBar.track", colorUIResource5, "ScrollBar.trackHighlight", uIDefaults.get("controlDkShadow"), "ScrollBar.thumb", uIDefaults.get("control"), "ScrollBar.thumbHighlight", uIDefaults.get("controlHighlight"), "ScrollBar.thumbDarkShadow", uIDefaults.get("controlDkShadow"), "ScrollBar.thumbShadow", uIDefaults.get("controlShadow"), "ScrollBar.border", bevelBorder, "ScrollBar.allowsAbsolutePositioning", Boolean.TRUE, "ScrollBar.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[]{"RIGHT", BasicSliderUI.Actions.POSITIVE_UNIT_INCREMENT, "KP_RIGHT", BasicSliderUI.Actions.POSITIVE_UNIT_INCREMENT, "DOWN", BasicSliderUI.Actions.POSITIVE_UNIT_INCREMENT, "KP_DOWN", BasicSliderUI.Actions.POSITIVE_UNIT_INCREMENT, "PAGE_DOWN", BasicSliderUI.Actions.POSITIVE_BLOCK_INCREMENT, "ctrl PAGE_DOWN", BasicSliderUI.Actions.POSITIVE_BLOCK_INCREMENT, "LEFT", BasicSliderUI.Actions.NEGATIVE_UNIT_INCREMENT, "KP_LEFT", BasicSliderUI.Actions.NEGATIVE_UNIT_INCREMENT, "UP", BasicSliderUI.Actions.NEGATIVE_UNIT_INCREMENT, "KP_UP", BasicSliderUI.Actions.NEGATIVE_UNIT_INCREMENT, "PAGE_UP", BasicSliderUI.Actions.NEGATIVE_BLOCK_INCREMENT, "ctrl PAGE_UP", BasicSliderUI.Actions.NEGATIVE_BLOCK_INCREMENT, "HOME", BasicSliderUI.Actions.MIN_SCROLL_INCREMENT, "END", BasicSliderUI.Actions.MAX_SCROLL_INCREMENT}), "ScrollPane.font", fontUIResource, "ScrollPane.background", uIDefaults.get("control"), "ScrollPane.foreground", uIDefaults.get("controlText"), "ScrollPane.border", null, "ScrollPane.viewportBorder", bevelBorder, "ScrollPane.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[]{"RIGHT", "unitScrollRight", "KP_RIGHT", "unitScrollRight", "DOWN", "unitScrollDown", "KP_DOWN", "unitScrollDown", "LEFT", "unitScrollLeft", "KP_LEFT", "unitScrollLeft", "UP", "unitScrollUp", "KP_UP", "unitScrollUp", "PAGE_UP", "scrollUp", "PAGE_DOWN", "scrollDown", "ctrl PAGE_UP", "scrollLeft", "ctrl PAGE_DOWN", "scrollRight", "ctrl HOME", "scrollHome", "ctrl END", "scrollEnd"}), "Slider.font", fontUIResource, "Slider.border", compoundBorderUIResource, "Slider.foreground", uIDefaults.get("control"), "Slider.background", colorUIResource5, "Slider.highlight", uIDefaults.get("controlHighlight"), "Slider.shadow", uIDefaults.get("controlShadow"), "Slider.focus", uIDefaults.get("controlDkShadow"), "Slider.focusInsets", new InsetsUIResource(0, 0, 0, 0), "Slider.focusInputMap", new UIDefaults.LazyInputMap(new Object[]{"RIGHT", BasicSliderUI.Actions.POSITIVE_UNIT_INCREMENT, "KP_RIGHT", BasicSliderUI.Actions.POSITIVE_UNIT_INCREMENT, "DOWN", BasicSliderUI.Actions.NEGATIVE_UNIT_INCREMENT, "KP_DOWN", BasicSliderUI.Actions.NEGATIVE_UNIT_INCREMENT, "ctrl PAGE_DOWN", BasicSliderUI.Actions.NEGATIVE_BLOCK_INCREMENT, "LEFT", BasicSliderUI.Actions.NEGATIVE_UNIT_INCREMENT, "KP_LEFT", BasicSliderUI.Actions.NEGATIVE_UNIT_INCREMENT, "UP", BasicSliderUI.Actions.POSITIVE_UNIT_INCREMENT, "KP_UP", BasicSliderUI.Actions.POSITIVE_UNIT_INCREMENT, "ctrl PAGE_UP", BasicSliderUI.Actions.POSITIVE_BLOCK_INCREMENT, "HOME", BasicSliderUI.Actions.MIN_SCROLL_INCREMENT, "END", BasicSliderUI.Actions.MAX_SCROLL_INCREMENT}), "Spinner.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[]{"UP", "increment", "KP_UP", "increment", "DOWN", "decrement", "KP_DOWN", "decrement"}), "Spinner.border", compoundBorderUIResource5, "SplitPane.background", uIDefaults.get("control"), "SplitPane.highlight", uIDefaults.get("controlHighlight"), "SplitPane.shadow", uIDefaults.get("controlShadow"), "SplitPane.dividerSize", 20, "SplitPane.activeThumb", uIDefaults.get("activeCaptionBorder"), "SplitPane.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[]{"UP", "negativeIncrement", "DOWN", "positiveIncrement", "LEFT", "negativeIncrement", "RIGHT", "positiveIncrement", "KP_UP", "negativeIncrement", "KP_DOWN", "positiveIncrement", "KP_LEFT", "negativeIncrement", "KP_RIGHT", "positiveIncrement", "HOME", "selectMin", "END", "selectMax", "F8", "startResize", "F6", "toggleFocus", "ctrl TAB", "focusOutForward", "ctrl shift TAB", "focusOutBackward"}), "TabbedPane.font", fontUIResource, "TabbedPane.background", uIDefaults.get("control"), "TabbedPane.foreground", uIDefaults.get("controlText"), "TabbedPane.light", uIDefaults.get("controlHighlight"), "TabbedPane.highlight", uIDefaults.get("controlLtHighlight"), "TabbedPane.shadow", uIDefaults.get("controlShadow"), "TabbedPane.darkShadow", uIDefaults.get("controlShadow"), "TabbedPane.unselectedTabBackground", obj6, "TabbedPane.unselectedTabForeground", obj7, "TabbedPane.unselectedTabHighlight", obj9, "TabbedPane.unselectedTabShadow", obj8, "TabbedPane.focus", uIDefaults.get("activeCaptionBorder"), "TabbedPane.tabInsets", new InsetsUIResource(3, 4, 3, 4), "TabbedPane.selectedTabPadInsets", new InsetsUIResource(3, 0, 1, 0), "TabbedPane.tabAreaInsets", new InsetsUIResource(4, 2, 0, 8), "TabbedPane.contentBorderInsets", new InsetsUIResource(2, 2, 2, 2), "TabbedPane.focusInputMap", new UIDefaults.LazyInputMap(new Object[]{"RIGHT", "navigateRight", "KP_RIGHT", "navigateRight", "LEFT", "navigateLeft", "KP_LEFT", "navigateLeft", "UP", "navigateUp", "KP_UP", "navigateUp", "DOWN", "navigateDown", "KP_DOWN", "navigateDown", "ctrl DOWN", "requestFocusForVisibleComponent", "ctrl KP_DOWN", "requestFocusForVisibleComponent"}), "TabbedPane.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[]{"ctrl PAGE_DOWN", "navigatePageDown", "ctrl PAGE_UP", "navigatePageUp", "ctrl UP", "requestFocus", "ctrl KP_UP", "requestFocus"}), "Tree.background", colorUIResource5, "Tree.hash", uIDefaults.get("controlDkShadow"), "Tree.iconShadow", uIDefaults.get("controlShadow"), "Tree.iconHighlight", uIDefaults.get("controlHighlight"), "Tree.iconBackground", uIDefaults.get("control"), "Tree.iconForeground", uIDefaults.get("controlShadow"), "Tree.textBackground", colorUIResource5, "Tree.textForeground", uIDefaults.get("textText"), "Tree.selectionBackground", uIDefaults.get("text"), "Tree.selectionForeground", uIDefaults.get("textText"), "Tree.selectionBorderColor", uIDefaults.get("activeCaptionBorder"), "Tree.openIcon", objMakeIcon, "Tree.closedIcon", objMakeIcon2, "Tree.leafIcon", obj10, "Tree.expandedIcon", obj11, "Tree.collapsedIcon", obj12, "Tree.editorBorder", focusBorder, "Tree.editorBorderSelectionColor", uIDefaults.get("activeCaptionBorder"), "Tree.rowHeight", new Integer(18), "Tree.drawsFocusBorderAroundIcon", Boolean.TRUE, "Tree.focusInputMap", new UIDefaults.LazyInputMap(new Object[]{"COPY", "copy", "PASTE", "paste", "CUT", "cut", "control INSERT", "copy", "shift INSERT", "paste", "shift DELETE", "cut", "UP", "selectPrevious", "KP_UP", "selectPrevious", "shift UP", "selectPreviousExtendSelection", "shift KP_UP", "selectPreviousExtendSelection", "ctrl shift UP", "selectPreviousExtendSelection", "ctrl shift KP_UP", "selectPreviousExtendSelection", "ctrl UP", "selectPreviousChangeLead", "ctrl KP_UP", "selectPreviousChangeLead", "DOWN", "selectNext", "KP_DOWN", "selectNext", "shift DOWN", "selectNextExtendSelection", "shift KP_DOWN", "selectNextExtendSelection", "ctrl shift DOWN", "selectNextExtendSelection", "ctrl shift KP_DOWN", "selectNextExtendSelection", "ctrl DOWN", "selectNextChangeLead", "ctrl KP_DOWN", "selectNextChangeLead", "RIGHT", "selectChild", "KP_RIGHT", "selectChild", "LEFT", "selectParent", "KP_LEFT", "selectParent", "PAGE_UP", "scrollUpChangeSelection", "shift PAGE_UP", "scrollUpExtendSelection", "ctrl shift PAGE_UP", "scrollUpExtendSelection", "ctrl PAGE_UP", "scrollUpChangeLead", "PAGE_DOWN", "scrollDownChangeSelection", "shift PAGE_DOWN", "scrollDownExtendSelection", "ctrl shift PAGE_DOWN", "scrollDownExtendSelection", "ctrl PAGE_DOWN", "scrollDownChangeLead", "HOME", "selectFirst", "shift HOME", "selectFirstExtendSelection", "ctrl shift HOME", "selectFirstExtendSelection", "ctrl HOME", "selectFirstChangeLead", "END", "selectLast", "shift END", "selectLastExtendSelection", "ctrl shift END", "selectLastExtendSelection", "ctrl END", "selectLastChangeLead", "F2", "startEditing", "ctrl A", "selectAll", "ctrl SLASH", "selectAll", "ctrl BACK_SLASH", "clearSelection", "ctrl LEFT", "scrollLeft", "ctrl KP_LEFT", "scrollLeft", "ctrl RIGHT", "scrollRight", "ctrl KP_RIGHT", "scrollRight", "SPACE", "addToSelection", "ctrl SPACE", "toggleAndAnchor", "shift SPACE", "extendTo", "ctrl shift SPACE", "moveSelectionTo"}), "Tree.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[]{"ESCAPE", "cancel"}), "Table.focusCellHighlightBorder", lineBorderUIResource, "Table.scrollPaneBorder", null, "Table.dropLineShortColor", uIDefaults.get("activeCaptionBorder"), "Table.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[]{"COPY", "copy", "PASTE", "paste", "CUT", "cut", "control INSERT", "copy", "shift INSERT", "paste", "shift DELETE", "cut", "RIGHT", "selectNextColumn", "KP_RIGHT", "selectNextColumn", "shift RIGHT", "selectNextColumnExtendSelection", "shift KP_RIGHT", "selectNextColumnExtendSelection", "ctrl shift RIGHT", "selectNextColumnExtendSelection", "ctrl shift KP_RIGHT", "selectNextColumnExtendSelection", "ctrl RIGHT", "selectNextColumnChangeLead", "ctrl KP_RIGHT", "selectNextColumnChangeLead", "LEFT", "selectPreviousColumn", "KP_LEFT", "selectPreviousColumn", "shift LEFT", "selectPreviousColumnExtendSelection", "shift KP_LEFT", "selectPreviousColumnExtendSelection", "ctrl shift LEFT", "selectPreviousColumnExtendSelection", "ctrl shift KP_LEFT", "selectPreviousColumnExtendSelection", "ctrl LEFT", "selectPreviousColumnChangeLead", "ctrl KP_LEFT", "selectPreviousColumnChangeLead", "DOWN", "selectNextRow", "KP_DOWN", "selectNextRow", "shift DOWN", "selectNextRowExtendSelection", "shift KP_DOWN", "selectNextRowExtendSelection", "ctrl shift DOWN", "selectNextRowExtendSelection", "ctrl shift KP_DOWN", "selectNextRowExtendSelection", "ctrl DOWN", "selectNextRowChangeLead", "ctrl KP_DOWN", "selectNextRowChangeLead", "UP", "selectPreviousRow", "KP_UP", "selectPreviousRow", "shift UP", "selectPreviousRowExtendSelection", "shift KP_UP", "selectPreviousRowExtendSelection", "ctrl shift UP", "selectPreviousRowExtendSelection", "ctrl shift KP_UP", "selectPreviousRowExtendSelection", "ctrl UP", "selectPreviousRowChangeLead", "ctrl KP_UP", "selectPreviousRowChangeLead", "HOME", "selectFirstColumn", "shift HOME", "selectFirstColumnExtendSelection", "ctrl shift HOME", "selectFirstRowExtendSelection", "ctrl HOME", "selectFirstRow", "END", "selectLastColumn", "shift END", "selectLastColumnExtendSelection", "ctrl shift END", "selectLastRowExtendSelection", "ctrl END", "selectLastRow", "PAGE_UP", "scrollUpChangeSelection", "shift PAGE_UP", "scrollUpExtendSelection", "ctrl shift PAGE_UP", "scrollLeftExtendSelection", "ctrl PAGE_UP", "scrollLeftChangeSelection", "PAGE_DOWN", "scrollDownChangeSelection", "shift PAGE_DOWN", "scrollDownExtendSelection", "ctrl shift PAGE_DOWN", "scrollRightExtendSelection", "ctrl PAGE_DOWN", "scrollRightChangeSelection", "TAB", "selectNextColumnCell", "shift TAB", "selectPreviousColumnCell", "ENTER", "selectNextRowCell", "shift ENTER", "selectPreviousRowCell", "ctrl A", "selectAll", "ctrl SLASH", "selectAll", "ctrl BACK_SLASH", "clearSelection", "ESCAPE", "cancel", "F2", "startEditing", "SPACE", "addToSelection", "ctrl SPACE", "toggleAndAnchor", "shift SPACE", "extendTo", "ctrl shift SPACE", "moveSelectionTo", "F8", "focusHeader"}), "FormattedTextField.focusInputMap", new UIDefaults.LazyInputMap(new Object[]{"ctrl C", DefaultEditorKit.copyAction, "ctrl V", DefaultEditorKit.pasteAction, "ctrl X", DefaultEditorKit.cutAction, "COPY", DefaultEditorKit.copyAction, "PASTE", DefaultEditorKit.pasteAction, "CUT", DefaultEditorKit.cutAction, "shift LEFT", DefaultEditorKit.selectionBackwardAction, "shift KP_LEFT", DefaultEditorKit.selectionBackwardAction, "shift RIGHT", DefaultEditorKit.selectionForwardAction, "shift KP_RIGHT", DefaultEditorKit.selectionForwardAction, "ctrl LEFT", DefaultEditorKit.previousWordAction, "ctrl KP_LEFT", DefaultEditorKit.previousWordAction, "ctrl RIGHT", DefaultEditorKit.nextWordAction, "ctrl KP_RIGHT", DefaultEditorKit.nextWordAction, "ctrl shift LEFT", DefaultEditorKit.selectionPreviousWordAction, "ctrl shift KP_LEFT", DefaultEditorKit.selectionPreviousWordAction, "ctrl shift RIGHT", DefaultEditorKit.selectionNextWordAction, "ctrl shift KP_RIGHT", DefaultEditorKit.selectionNextWordAction, "ctrl A", DefaultEditorKit.selectAllAction, "HOME", DefaultEditorKit.beginLineAction, "END", DefaultEditorKit.endLineAction, "shift HOME", DefaultEditorKit.selectionBeginLineAction, "shift END", DefaultEditorKit.selectionEndLineAction, "BACK_SPACE", DefaultEditorKit.deletePrevCharAction, "shift BACK_SPACE", DefaultEditorKit.deletePrevCharAction, "ctrl H", DefaultEditorKit.deletePrevCharAction, "DELETE", DefaultEditorKit.deleteNextCharAction, "ctrl DELETE", DefaultEditorKit.deleteNextWordAction, "ctrl BACK_SPACE", DefaultEditorKit.deletePrevWordAction, "RIGHT", DefaultEditorKit.forwardAction, "LEFT", DefaultEditorKit.backwardAction, "KP_RIGHT", DefaultEditorKit.forwardAction, "KP_LEFT", DefaultEditorKit.backwardAction, "ENTER", JTextField.notifyAction, "ctrl BACK_SLASH", "unselect", "control shift O", "toggle-componentOrientation", "ESCAPE", "reset-field-edit", "UP", "increment", "KP_UP", "increment", "DOWN", "decrement", "KP_DOWN", "decrement"}), "ToolBar.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[]{"UP", "navigateUp", "KP_UP", "navigateUp", "DOWN", "navigateDown", "KP_DOWN", "navigateDown", "LEFT", "navigateLeft", "KP_LEFT", "navigateLeft", "RIGHT", "navigateRight", "KP_RIGHT", "navigateRight"}), "ComboBox.control", uIDefaults.get("control"), "ComboBox.controlForeground", colorUIResource2, "ComboBox.background", uIDefaults.get("window"), "ComboBox.foreground", colorUIResource2, "ComboBox.border", compoundBorderUIResource2, "ComboBox.selectionBackground", colorUIResource2, "ComboBox.selectionForeground", uIDefaults.get("text"), "ComboBox.disabledBackground", uIDefaults.get("control"), "ComboBox.disabledForeground", uIDefaults.get("textInactiveText"), "ComboBox.font", fontUIResource, "ComboBox.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[]{"ESCAPE", "hidePopup", "PAGE_UP", "pageUpPassThrough", "PAGE_DOWN", "pageDownPassThrough", "HOME", "homePassThrough", "END", "endPassThrough", "DOWN", "selectNext", "KP_DOWN", "selectNext", "UP", "selectPrevious", "KP_UP", "selectPrevious", "SPACE", "spacePopup", "ENTER", "enterPressed"}), "TextField.caretForeground", colorUIResource2, "TextField.caretBlinkRate", 500, "TextField.inactiveForeground", uIDefaults.get("textInactiveText"), "TextField.selectionBackground", uIDefaults.get("textHighlight"), "TextField.selectionForeground", uIDefaults.get("textHighlightText"), "TextField.background", uIDefaults.get("window"), "TextField.foreground", uIDefaults.get("textText"), "TextField.font", fontUIResource3, "TextField.border", compoundBorderUIResource5, "TextField.focusInputMap", lazyInputMap, "PasswordField.caretForeground", colorUIResource2, "PasswordField.caretBlinkRate", 500, "PasswordField.inactiveForeground", uIDefaults.get("textInactiveText"), "PasswordField.selectionBackground", uIDefaults.get("textHighlight"), "PasswordField.selectionForeground", uIDefaults.get("textHighlightText"), "PasswordField.background", uIDefaults.get("window"), "PasswordField.foreground", uIDefaults.get("textText"), "PasswordField.font", fontUIResource4, "PasswordField.border", compoundBorderUIResource5, "PasswordField.focusInputMap", lazyInputMap2, "TextArea.caretForeground", colorUIResource2, "TextArea.caretBlinkRate", 500, "TextArea.inactiveForeground", uIDefaults.get("textInactiveText"), "TextArea.selectionBackground", uIDefaults.get("textHighlight"), "TextArea.selectionForeground", uIDefaults.get("textHighlightText"), "TextArea.background", uIDefaults.get("window"), "TextArea.foreground", uIDefaults.get("textText"), "TextArea.font", fontUIResource4, "TextArea.border", marginBorder, "TextArea.focusInputMap", lazyInputMap3, "TextPane.caretForeground", colorUIResource2, "TextPane.caretBlinkRate", 500, "TextPane.inactiveForeground", uIDefaults.get("textInactiveText"), "TextPane.selectionBackground", colorUIResource4, "TextPane.selectionForeground", uIDefaults.get("textHighlightText"), "TextPane.background", colorUIResource3, "TextPane.foreground", uIDefaults.get("textText"), "TextPane.font", fontUIResource2, "TextPane.border", marginBorder, "TextPane.focusInputMap", lazyInputMap3, "EditorPane.caretForeground", colorUIResource, "EditorPane.caretBlinkRate", 500, "EditorPane.inactiveForeground", uIDefaults.get("textInactiveText"), "EditorPane.selectionBackground", colorUIResource4, "EditorPane.selectionForeground", uIDefaults.get("textHighlightText"), "EditorPane.background", colorUIResource3, "EditorPane.foreground", uIDefaults.get("textText"), "EditorPane.font", fontUIResource2, "EditorPane.border", marginBorder, "EditorPane.focusInputMap", lazyInputMap3, "FileChooser.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[]{"ESCAPE", FilePane.ACTION_CANCEL}), "ToolTip.border", bevelBorder2, "ToolTip.background", uIDefaults.get("info"), "ToolTip.foreground", uIDefaults.get("infoText"), "PopupMenu.selectedWindowInputMapBindings", new Object[]{"ESCAPE", "cancel", "TAB", "cancel", "shift TAB", "cancel", "DOWN", "selectNext", "KP_DOWN", "selectNext", "UP", "selectPrevious", "KP_UP", "selectPrevious", "LEFT", "selectParent", "KP_LEFT", "selectParent", "RIGHT", "selectChild", "KP_RIGHT", "selectChild", "ENTER", RuntimeModeler.RETURN, "SPACE", RuntimeModeler.RETURN}, "OptionPane.border", new BorderUIResource.EmptyBorderUIResource(10, 0, 0, 0), "OptionPane.messageAreaBorder", new BorderUIResource.EmptyBorderUIResource(10, 10, 12, 10), "OptionPane.buttonAreaBorder", new BorderUIResource.EmptyBorderUIResource(10, 10, 10, 10), "OptionPane.errorIcon", SwingUtilities2.makeIcon(getClass(), MotifLookAndFeel.class, "icons/Error.gif"), "OptionPane.informationIcon", SwingUtilities2.makeIcon(getClass(), MotifLookAndFeel.class, "icons/Inform.gif"), "OptionPane.warningIcon", SwingUtilities2.makeIcon(getClass(), MotifLookAndFeel.class, "icons/Warn.gif"), "OptionPane.questionIcon", SwingUtilities2.makeIcon(getClass(), MotifLookAndFeel.class, "icons/Question.gif"), "OptionPane.windowBindings", new Object[]{"ESCAPE", "close"}, "RootPane.defaultButtonWindowKeyBindings", new Object[]{"ENTER", BasicRootPaneUI.Actions.PRESS, "released ENTER", BasicRootPaneUI.Actions.RELEASE, "ctrl ENTER", BasicRootPaneUI.Actions.PRESS, "ctrl released ENTER", BasicRootPaneUI.Actions.RELEASE}});
    }
}
