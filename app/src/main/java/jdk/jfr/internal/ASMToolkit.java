package jdk.jfr.internal;

import com.sun.org.apache.xalan.internal.xsltc.compiler.Constants;
import com.sun.org.apache.xerces.internal.impl.xs.SchemaSymbols;
import java.io.ByteArrayOutputStream;
import java.io.PrintWriter;
import java.util.List;
import java.util.function.Supplier;
import jdk.internal.org.objectweb.asm.ClassReader;
import jdk.internal.org.objectweb.asm.MethodVisitor;
import jdk.internal.org.objectweb.asm.commons.Method;
import jdk.internal.org.objectweb.asm.util.TraceClassVisitor;
import jdk.jfr.ValueDescriptor;
import jdk.jfr.internal.EventInstrumentation;
import org.icepdf.core.util.PdfOps;

/* loaded from: jfr.jar:jdk/jfr/internal/ASMToolkit.class */
final class ASMToolkit {
    private static jdk.internal.org.objectweb.asm.Type TYPE_STRING = jdk.internal.org.objectweb.asm.Type.getType((Class<?>) String.class);
    private static jdk.internal.org.objectweb.asm.Type Type_THREAD = jdk.internal.org.objectweb.asm.Type.getType((Class<?>) Thread.class);
    private static jdk.internal.org.objectweb.asm.Type TYPE_CLASS = jdk.internal.org.objectweb.asm.Type.getType((Class<?>) Class.class);

    ASMToolkit() {
    }

    public static void invokeSpecial(MethodVisitor methodVisitor, String str, Method method) {
        methodVisitor.visitMethodInsn(183, str, method.getName(), method.getDescriptor(), false);
    }

    public static void invokeStatic(MethodVisitor methodVisitor, String str, Method method) {
        methodVisitor.visitMethodInsn(184, str, method.getName(), method.getDescriptor(), false);
    }

    public static void invokeVirtual(MethodVisitor methodVisitor, String str, Method method) {
        methodVisitor.visitMethodInsn(182, str, method.getName(), method.getDescriptor(), false);
    }

    public static jdk.internal.org.objectweb.asm.Type toType(ValueDescriptor valueDescriptor) {
        switch (valueDescriptor.getTypeName()) {
            case "byte":
                return jdk.internal.org.objectweb.asm.Type.BYTE_TYPE;
            case "short":
                return jdk.internal.org.objectweb.asm.Type.SHORT_TYPE;
            case "int":
                return jdk.internal.org.objectweb.asm.Type.INT_TYPE;
            case "long":
                return jdk.internal.org.objectweb.asm.Type.LONG_TYPE;
            case "double":
                return jdk.internal.org.objectweb.asm.Type.DOUBLE_TYPE;
            case "float":
                return jdk.internal.org.objectweb.asm.Type.FLOAT_TYPE;
            case "char":
                return jdk.internal.org.objectweb.asm.Type.CHAR_TYPE;
            case "boolean":
                return jdk.internal.org.objectweb.asm.Type.BOOLEAN_TYPE;
            case "java.lang.String":
                return TYPE_STRING;
            case "java.lang.Thread":
                return Type_THREAD;
            case "java.lang.Class":
                return TYPE_CLASS;
            default:
                throw new Error("Not a valid type " + valueDescriptor.getTypeName());
        }
    }

    public static String getDescriptor(String str) {
        if ("int".equals(str)) {
            return "I";
        }
        if (SchemaSymbols.ATTVAL_LONG.equals(str)) {
            return "J";
        }
        if ("boolean".equals(str)) {
            return Constants.HASIDCALL_INDEX_SIG;
        }
        if (SchemaSymbols.ATTVAL_FLOAT.equals(str)) {
            return PdfOps.F_TOKEN;
        }
        if (SchemaSymbols.ATTVAL_DOUBLE.equals(str)) {
            return PdfOps.D_TOKEN;
        }
        if (SchemaSymbols.ATTVAL_SHORT.equals(str)) {
            return PdfOps.S_TOKEN;
        }
        if ("char".equals(str)) {
            return "C";
        }
        if (SchemaSymbols.ATTVAL_BYTE.equals(str)) {
            return PdfOps.B_TOKEN;
        }
        return jdk.internal.org.objectweb.asm.Type.getObjectType(getInternalName(str)).getDescriptor();
    }

    public static String getInternalName(String str) {
        return str.replace(".", "/");
    }

    public static Method makeWriteMethod(List<EventInstrumentation.FieldInfo> list) {
        StringBuilder sb = new StringBuilder();
        sb.append("(");
        for (EventInstrumentation.FieldInfo fieldInfo : list) {
            if (!fieldInfo.fieldName.equals(EventInstrumentation.FIELD_EVENT_THREAD) && !fieldInfo.fieldName.equals("stackTrace")) {
                sb.append(fieldInfo.fieldDescriptor);
            }
        }
        sb.append(")V");
        return new Method("write", sb.toString());
    }

    public static void logASM(String str, byte[] bArr) {
        Logger.log(LogTag.JFR_SYSTEM_BYTECODE, LogLevel.INFO, "Generated bytecode for class " + str);
        Logger.log(LogTag.JFR_SYSTEM_BYTECODE, LogLevel.TRACE, (Supplier<String>) () -> {
            ClassReader classReader = new ClassReader(bArr);
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            PrintWriter printWriter = new PrintWriter(byteArrayOutputStream);
            printWriter.println("Bytecode:");
            classReader.accept(new TraceClassVisitor(printWriter), 0);
            return byteArrayOutputStream.toString();
        });
    }
}
